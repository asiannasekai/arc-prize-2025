[
  {
    "instruction": "Follow the conditional logic to generate the output:",
    "input": "0 1 0\\n1 0 1\\n0 1 0\\n1 0 1\\n0 1 0\\n1 0 1",
    "output": "0 2 0\\n2 0 2\\n0 2 0\\n2 0 2\\n0 2 0\\n2 0 2\\n0 2 0\\n2 0 2\\n0 2 0",
    "metadata": {
      "task_id": "017c7c7b",
      "example_id": 0,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          6,
          3
        ],
        "output_shape": [
          9,
          3
        ],
        "size_ratio": 1.5,
        "input_colors": [
          0,
          1
        ],
        "output_colors": [
          0,
          2
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Transform this grid according to the established rule:",
    "input": "0 1 0\\n1 1 0\\n0 1 0\\n0 1 1\\n0 1 0\\n1 1 0",
    "output": "0 2 0\\n2 2 0\\n0 2 0\\n0 2 2\\n0 2 0\\n2 2 0\\n0 2 0\\n0 2 2\\n0 2 0",
    "metadata": {
      "task_id": "017c7c7b",
      "example_id": 1,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          6,
          3
        ],
        "output_shape": [
          9,
          3
        ],
        "size_ratio": 1.5,
        "input_colors": [
          0,
          1
        ],
        "output_colors": [
          0,
          2
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Apply the logical rule to transform this grid:",
    "input": "0 1 0\\n1 1 0\\n0 1 0\\n0 1 0\\n1 1 0\\n0 1 0",
    "output": "0 2 0\\n2 2 0\\n0 2 0\\n0 2 0\\n2 2 0\\n0 2 0\\n0 2 0\\n2 2 0\\n0 2 0",
    "metadata": {
      "task_id": "017c7c7b",
      "example_id": 2,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          6,
          3
        ],
        "output_shape": [
          9,
          3
        ],
        "size_ratio": 1.5,
        "input_colors": [
          0,
          1
        ],
        "output_colors": [
          0,
          2
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Use the pattern rule to convert input to output:",
    "input": "9 7 9 7 7 7 5 5 5\\n4 7 9 7 9 7 7 5 5\\n4 4 7 7 9 7 9 7 5\\n4 4 4 7 7 7 9 7 9",
    "output": "0 0 0 9 7 9 7 7 7 5 5 5\\n0 0 4 7 9 7 9 7 7 5 5 0\\n0 4 4 7 7 9 7 9 7 5 0 0\\n4 4 4 7 7 7 9 7 9 0 0 0",
    "metadata": {
      "task_id": "3cd86f4f",
      "example_id": 0,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          4,
          9
        ],
        "output_shape": [
          4,
          12
        ],
        "size_ratio": 1.3333333333333333,
        "input_colors": [
          4,
          5,
          7,
          9
        ],
        "output_colors": [
          0,
          4,
          5,
          7,
          9
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Transform this grid according to the established rule:",
    "input": "4 8 8 8 8 7\\n1 4 8 8 7 8\\n4 1 4 7 8 8\\n6 4 1 4 8 8\\n6 6 4 1 4 8\\n6 6 6 4 1 4",
    "output": "0 0 0 0 0 4 8 8 8 8 7\\n0 0 0 0 1 4 8 8 7 8 0\\n0 0 0 4 1 4 7 8 8 0 0\\n0 0 6 4 1 4 8 8 0 0 0\\n0 6 6 4 1 4 8 0 0 0 0\\n6 6 6 4 1 4 0 0 0 0 0",
    "metadata": {
      "task_id": "3cd86f4f",
      "example_id": 1,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          6,
          6
        ],
        "output_shape": [
          6,
          11
        ],
        "size_ratio": 1.8333333333333333,
        "input_colors": [
          1,
          4,
          6,
          7,
          8
        ],
        "output_colors": [
          0,
          1,
          4,
          6,
          7,
          8
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Transform this grid according to the established rule:",
    "input": "1 6 6 6\\n1 6 6 6\\n1 6 6 6\\n1 8 8 8\\n1 5 5 5\\n1 5 5 5\\n1 5 5 5",
    "output": "0 0 0 0 0 0 1 6 6 6\\n0 0 0 0 0 1 6 6 6 0\\n0 0 0 0 1 6 6 6 0 0\\n0 0 0 1 8 8 8 0 0 0\\n0 0 1 5 5 5 0 0 0 0\\n0 1 5 5 5 0 0 0 0 0\\n1 5 5 5 0 0 0 0 0 0",
    "metadata": {
      "task_id": "3cd86f4f",
      "example_id": 2,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          7,
          4
        ],
        "output_shape": [
          7,
          10
        ],
        "size_ratio": 2.5,
        "input_colors": [
          1,
          5,
          6,
          8
        ],
        "output_colors": [
          0,
          1,
          5,
          6,
          8
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Apply the logical rule to transform this grid:",
    "input": "0 2 0 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0\\n2 0 2 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0\\n2 0 2 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0",
    "output": "0 2 0 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0\\n2 0 2 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0\\n2 0 2 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0\\n2 0 2 0 0 0 0 0 0 0\\n0 2 0 0 0 0 0 0 0 0",
    "metadata": {
      "task_id": "53b68214",
      "example_id": 0,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          8,
          10
        ],
        "output_shape": [
          10,
          10
        ],
        "size_ratio": 1.25,
        "input_colors": [
          0,
          2
        ],
        "output_colors": [
          0,
          2
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Follow the conditional logic to generate the output:",
    "input": "0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0",
    "output": "0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 3 0 0 0 0 0 0 0",
    "metadata": {
      "task_id": "53b68214",
      "example_id": 1,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          5,
          10
        ],
        "output_shape": [
          10,
          10
        ],
        "size_ratio": 2.0,
        "input_colors": [
          0,
          3
        ],
        "output_colors": [
          0,
          3
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Transform this grid according to the established rule:",
    "input": "1 1 1 0 0 0 0 0 0 0\\n0 0 1 0 0 0 0 0 0 0\\n0 0 1 1 1 0 0 0 0 0\\n0 0 0 0 1 0 0 0 0 0\\n0 0 0 0 1 1 1 0 0 0\\n0 0 0 0 0 0 1 0 0 0",
    "output": "1 1 1 0 0 0 0 0 0 0\\n0 0 1 0 0 0 0 0 0 0\\n0 0 1 1 1 0 0 0 0 0\\n0 0 0 0 1 0 0 0 0 0\\n0 0 0 0 1 1 1 0 0 0\\n0 0 0 0 0 0 1 0 0 0\\n0 0 0 0 0 0 1 1 1 0\\n0 0 0 0 0 0 0 0 1 0\\n0 0 0 0 0 0 0 0 1 1\\n0 0 0 0 0 0 0 0 0 0",
    "metadata": {
      "task_id": "53b68214",
      "example_id": 2,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          6,
          10
        ],
        "output_shape": [
          10,
          10
        ],
        "size_ratio": 1.6666666666666667,
        "input_colors": [
          0,
          1
        ],
        "output_colors": [
          0,
          1
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Transform this grid according to the established rule:",
    "input": "7 1\\n1 7\\n6 5\\n5 6",
    "output": "7 1 9\\n1 7 9\\n9 9 9\\n9 6 5\\n9 5 6",
    "metadata": {
      "task_id": "8618d23e",
      "example_id": 0,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          4,
          2
        ],
        "output_shape": [
          5,
          3
        ],
        "size_ratio": 1.875,
        "input_colors": [
          1,
          5,
          6,
          7
        ],
        "output_colors": [
          1,
          5,
          6,
          7,
          9
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Apply the logical rule to transform this grid:",
    "input": "4\\n0",
    "output": "4 9\\n9 9\\n9 0",
    "metadata": {
      "task_id": "8618d23e",
      "example_id": 1,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          2,
          1
        ],
        "output_shape": [
          3,
          2
        ],
        "size_ratio": 3.0,
        "input_colors": [
          0,
          4
        ],
        "output_colors": [
          0,
          4,
          9
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Apply the logical rule to transform this grid:",
    "input": "2 2 2\\n2 8 8\\n2 2 2\\n8 7 7\\n8 8 7\\n8 7 7",
    "output": "2 2 2 9\\n2 8 8 9\\n2 2 2 9\\n9 9 9 9\\n9 8 7 7\\n9 8 8 7\\n9 8 7 7",
    "metadata": {
      "task_id": "8618d23e",
      "example_id": 2,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          6,
          3
        ],
        "output_shape": [
          7,
          4
        ],
        "size_ratio": 1.5555555555555556,
        "input_colors": [
          2,
          7,
          8
        ],
        "output_colors": [
          2,
          7,
          8,
          9
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Transform this grid according to the established rule:",
    "input": "8 8 2\\n3 8 8\\n3 3 4\\n3 3 4",
    "output": "3 8 4 2\\n3 8 4 0\\n3 8 0 0\\n3 8 0 0\\n3 0 0 0",
    "metadata": {
      "task_id": "9af7a82c",
      "example_id": 0,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          4,
          3
        ],
        "output_shape": [
          5,
          4
        ],
        "size_ratio": 1.6666666666666667,
        "input_colors": [
          2,
          3,
          4,
          8
        ],
        "output_colors": [
          0,
          2,
          3,
          4,
          8
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Follow the conditional logic to generate the output:",
    "input": "3 1 1 4\\n2 2 2 4\\n4 4 4 4",
    "output": "4 2 1 3\\n4 2 1 0\\n4 2 0 0\\n4 0 0 0\\n4 0 0 0\\n4 0 0 0",
    "metadata": {
      "task_id": "9af7a82c",
      "example_id": 1,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          3,
          4
        ],
        "output_shape": [
          6,
          4
        ],
        "size_ratio": 2.0,
        "input_colors": [
          1,
          2,
          3,
          4
        ],
        "output_colors": [
          0,
          1,
          2,
          3,
          4
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Transform this grid according to the established rule:",
    "input": "1 1 1\\n2 2 1\\n2 8 1\\n2 8 1",
    "output": "1 2 8\\n1 2 8\\n1 2 0\\n1 2 0\\n1 0 0\\n1 0 0",
    "metadata": {
      "task_id": "9af7a82c",
      "example_id": 2,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          4,
          3
        ],
        "output_shape": [
          6,
          3
        ],
        "size_ratio": 1.5,
        "input_colors": [
          1,
          2,
          8
        ],
        "output_colors": [
          0,
          1,
          2,
          8
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  },
  {
    "instruction": "Transform this grid according to the established rule:",
    "input": "2 2 1\\n2 3 1\\n1 1 1",
    "output": "1 2 3\\n1 2 0\\n1 2 0\\n1 0 0\\n1 0 0",
    "metadata": {
      "task_id": "9af7a82c",
      "example_id": 3,
      "expert_type": "rule_based",
      "analysis": {
        "input_shape": [
          3,
          3
        ],
        "output_shape": [
          5,
          3
        ],
        "size_ratio": 1.6666666666666667,
        "input_colors": [
          1,
          2,
          3
        ],
        "output_colors": [
          0,
          1,
          2,
          3
        ],
        "color_mapping": {},
        "transformation_type": "expansion"
      }
    }
  }
]